@mixin bgImgRetina($file-1x, $file-2x) {
  background-image: url($file-1x);

  @media (-webkit-min-device-pixel-ratio: 2), (min--moz-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 2/1), (min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx) {
    background-image: url($file-2x);
  }
}

@mixin centerBlock() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin clean {
  &::after {
    content: "";
    position: relative;
    display: block;
    clear: both;
    width: 100%;
  }
}

@mixin clearfix {
  &::before,
  &::after {
    content: "";
    display: table;
  }
  &::after {
    clear: both;
  }
}

@mixin customScrollbar($thickness) {
  scrollbar-color: $colorGrey $colorWhite;

  &::-webkit-scrollbar-track {
    background-color: $colorWhite;
  }

  &::-webkit-scrollbar-thumb {
    background-color: $colorGrey;
    border-left: 1px solid $colorWhite;
    border-right: 1px solid $colorWhite;
  }

  @if $thickness == thick {
    &::-webkit-scrollbar {
      width: 16px;
      height: 16px;
    }

    &::-webkit-scrollbar-thumb {
      border-radius: $borderRadiusSecondary;
    }
  } @else if $thickness == thin {
    scrollbar-width: thin;

    &::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }

    &::-webkit-scrollbar-thumb {
      border-radius: $borderRadiusPrimary;
    }
  }
}

@mixin filterGrey() {
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale");
  filter: grayscale(100%);
  filter: gray;
}

@mixin imgResponsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}

@mixin placeholder($color: $colorPlaceholder) {
  &::-webkit-input-placeholder {
    color: $color;
    transition: all 0.25s ease-in;
  }

  &::-moz-placeholder {
    color: $color;
    transition: all 0.25s ease-in;
  }

  &:-moz-placeholder {
    color: $color;
    transition: all 0.25s ease-in;
  }

  &:-ms-input-placeholder {
    color: $color;
    transition: all 0.25s ease-in;
  }

  &::-ms-input-placeholder {
    color: $color;
    transition: all 0.25s ease-in;
  }

  &::placeholder {
    color: $color;
    opacity: 1;
    transition: all 0.25s ease-in;
  }

  &:focus::-webkit-input-placeholder {
    text-indent: -0.25rem;
    color: transparent;
  }

  &:focus::-moz-placeholder {
    text-indent: -0.25rem;
    color: transparent;
  }

  &:focus:-moz-placeholder {
    text-indent: -0.25rem;
    color: transparent;
  }

  &:focus:-ms-input-placeholder {
    text-indent: -0.25rem;
    color: transparent;
  }

  &:focus::placeholder {
    text-indent: -0.25rem;
    color: transparent;
  }
}

@mixin resetPosAbs() {
  position: relative;
  top: auto;
  right: auto;
  bottom: auto;
  left: auto;
}

@mixin respondFrom($breakpoint) {
  @if map-has-key($breakpoints-min, $breakpoint) {
    @media (min-width: #{map-get($breakpoints-min, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints-min` map.";
  }
}

@mixin respondTo($breakpoint) {
  @if map-has-key($breakpoints-max, $breakpoint) {
    @media (max-width: #{map-get($breakpoints-max, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints-max` map.";
  }
}

@mixin responsiveMediumContainer($widthRatio, $heightRatio) {
  width: 100%;
  height: auto;
  aspect-ratio: math.div($widthRatio, $heightRatio);
  position: relative;
  overflow: hidden;

  // aspect-ratio fallback
  &::before {
    content: "";
    display: block;
    padding-bottom: math.div($heightRatio, $widthRatio) * 100%;
  }
}

@mixin srOnly() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  border: 0;
}

@mixin text($fontColor: $colorText, $fontSize: 0.875rem, $fontWeight: $fontWeightNormal, $lineHeight: normal) {
  color: $fontColor;
  font-size: $fontSize;
  font-weight: $fontWeight;
  line-height: $lineHeight;
}

// Requires inline-block or block for proper styling
@mixin textOverflowEllipsis() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin textOutline($color) {
  text-shadow: -1px -1px 0 $color, 1px -1px 0 $color, -1px 1px 0 $color, 1px 1px 0 $color;
}

@mixin textUnderlineAnim($color: currentColor) {
  position: relative;
  text-decoration: none;
  text-decoration-color: transparent;
  white-space: nowrap;

  &::before {
    content: "";
    width: 100%;
    height: 0.125rem;
    position: absolute;
    bottom: -0.125rem;
    background-color: $color;
    transition: transform 0.25s ease-in-out;
    transform: scaleX(0);
  }

  &:focus,
  &:hover,
  &:active,
  &.is-active {
    &::before {
      transform: scaleX(1);
    }
  }
}

@mixin textUnderlineThick($thickness: 0.125rem) {
  text-decoration: none;
  text-decoration-color: transparent;
  white-space: nowrap;
  transition: color 0.25s linear, outline-offset 0.25s linear, text-decoration-color 0.25s linear;

  &:focus,
  &:hover,
  &:active,
  &.is-active {
    text-decoration: underline;
    text-decoration-color: currentColor;
    text-decoration-thickness: $thickness;
  }
}

@mixin transition($transitionProperty: all, $transitionDuration: 0.25s, $transitionTimingFunction: ease-in-out) {
  transition-property: $transitionProperty;
  transition-duration: $transitionDuration;
  transition-timing-function: $transitionTimingFunction;
}
